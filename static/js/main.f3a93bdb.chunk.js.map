{"version":3,"sources":["component/users/Users.module.css","component/myPosts/MyPosts.module.css","component/menu/Menu.module.css","component/dialogs/Dialogs.module.css","component/feature/Login/Login.module.css","component/profile/Profile.module.css","component/header/Header.module.css","component/dialogs/Messages/Messages.module.css","component/menu/Menu.tsx","api/users-api.ts","api/auth-api.ts","api/profile-api.ts","store/auth-reducer.ts","api/subscribe-api.ts","store/users-reducer.ts","store/profile-reducer.ts","api/dialogs-api.ts","store/dialogs-reducer.ts","component/users/UsersItem.tsx","component/follow/Follow.tsx","component/feature/EditableItem.tsx","component/myPosts/Post.tsx","component/feature/Textarea.tsx","component/feature/Input.tsx","component/addItem/AddItem.tsx","component/myPosts/MyPosts.tsx","store/posts-reducer.ts","component/myPosts/MyPostContainer.tsx","component/users/Users.tsx","component/users/UserContainer.tsx","component/profile/Profile.tsx","component/profile/ProfileContainer.tsx","component/profile/MyProfile.tsx","component/header/Header.tsx","component/header/HeaderContainer.tsx","component/feature/Login/Login.tsx","store/reselect/howNumberOfPagesReselect.ts","component/dialogs/DialogsItem.tsx","component/dialogs/Dialogs.tsx","component/dialogs/Messages/MessageItem.tsx","component/dialogs/Messages/messageField.tsx","component/dialogs/Messages/Messages.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","Menu","newMessagesCount","className","style","menu","title","navigation","navLink","to","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","count","page","a","get","getFollowing","countUsers","numbersOfPage","following","then","res","Math","ceil","data","totalCount","i","users","items","filter","u","followed","authApi","post","delete","profileApi","userID","profile","put","initialState","isLoggedIn","loginName","me","id","photo","followings","authorizedAC","type","setIsLoggedInAC","value","setAuthorizedIdAC","setLoggedInTC","dispatch","resultCode","subscribeApi","currentPageNumber","followUserAC","isFollow","checkFollowUserTC","console","log","aboutMe","userId","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","photos","small","large","getUserProfileTC","userProfile","getUserStatusTC","userStatus","dialogsApi","pageSize","body","messageID","date","dialogsInitialState","dialogs","totalCountDialogs","messages","totalCountMessages","sectionSelected","spam","setTotalCountForMessage","removeMessageAC","startOrRefreshDialogsTC","getMessagesTC","ID","getNewMessagesTC","UsersItem","nextProps","this","props","getUserProfile","getUserStatus","follow","unfollow","startOrRefreshDialogs","getMessages","s","usersItem","image","onClick","onClickHandler","name","src","photoUrl","description","userName","buttonsBlock","followBtn","bind","writeMessage","React","Component","mapDispatchToProps","checkFollow","connect","state","auth","Follow","nextState","nextContext","map","user","addFollowing","usersPage","EditableItem","onChangeCallBack","editMode","useState","error","setError","onChange","e","currentTarget","trim","Post","text","setEditMode","postsItem","postsItemContent","postTitle","newTitle","changeTitleCallBack","newText","changeTextCallBack","btnsBlock","deletePost","removePostCallBack","Textarea","finishClassName","some","onKeyPress","key","preventDefault","addPost","onChangeTextCallBack","placeholder","Input","onChangeTitleCallBack","AddItem","setText","setTitle","changeError","newError","errors","push","addPostCallBack","inputBlock","textareaBlock","MyPosts","addPosts","postsContainer","posts","changeTitle","changeText","removePost","MyPostsClass","MyPostContainer","addPostAC","removePostAC","changeTitleAC","changeTextAC","Users","showUsersCount","numberOfPage","buttonsForUserPage","createsButtons","start","end","finalClassName","showPageBtn","active","showPageBtnsBlock","UsersClassComponent","UsersContainer","Profile","status","profileImage","undefined","updateUserProfile","ProfileContainer","profilePage","MyProfile","Header","url","header","userPhoto","logout","HeaderContainer","prevProps","prevState","snapshot","authorized","login","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","length","onSubmit","form","handleSubmit","getFieldProps","autoComplete","howNumberOfPagesReselect","pagesSize","correctDate","fullDate","replace","split","time","dateArray","substring","DialogsItem","lastUserActivityDate","useDispatch","dialogsItem","alt","hasNewMessages","Dialogs","getDialogs","getNewMessages","d","dialogsPage","MessageItem","message","senderId","viewed","isSpam","pageCount","authorizedID","addMessageToSpam","restoreMessage","addedAt","authorizedPhoto","messageItem","removeMessageBtn","removeMessage","senderName","checkIsViewedMessage","isViewed","setIsViewedMessage","getNewestMessages","getState","find","m","addMessageToSpamAC","removeFromSpamAC","MessageField","sendMessage","Messages","sectionSelect","clearMessages","setState","messagesTotalCount","select","setSectionSelect","maxPageSize","checkAreThereMessages","nav","onClickShowMessages","messagesBlock","showPrevMessages","showNextMessages","sendField","refreshDialog","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","f","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3a93bdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2CVN_\",\"usersItem\":\"Users_usersItem__U6GW6\",\"image\":\"Users_image__XE0bI\",\"description\":\"Users_description__3yO-k\",\"userName\":\"Users_userName__1fEbA\",\"buttonsBlock\":\"Users_buttonsBlock__1zTQh\",\"showPageBtnsBlock\":\"Users_showPageBtnsBlock__2nvE5\",\"showPageBtn\":\"Users_showPageBtn__1ERzp\",\"active\":\"Users_active__3-zlN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3G9CQ\",\"addPosts\":\"MyPosts_addPosts__1drdK\",\"inputBlock\":\"MyPosts_inputBlock__2AjV6\",\"textareaBlock\":\"MyPosts_textareaBlock__xMm1V\",\"postsContainer\":\"MyPosts_postsContainer__8vaQ8\",\"postsItem\":\"MyPosts_postsItem__3V1Cj\",\"postsItemContent\":\"MyPosts_postsItemContent__oD--5\",\"postTitle\":\"MyPosts_postTitle__2qeE6\",\"btnsBlock\":\"MyPosts_btnsBlock__3LBht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__1RSin\",\"title\":\"Menu_title__e9S9R\",\"navigation\":\"Menu_navigation__1yZ_X\",\"navLink\":\"Menu_navLink__12Uxb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"Dialogs_dialogsItem__1OIir\",\"image\":\"Dialogs_image__Xpw8z\",\"description\":\"Dialogs_description__1fbuO\",\"userName\":\"Dialogs_userName__3UEuA\",\"hasNewMessages\":\"Dialogs_hasNewMessages__2sQjl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__zzBeu\",\"error\":\"Login_error__6VAJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__12139\",\"profileImage\":\"Profile_profileImage__2JMTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1Tf3C\",\"userPhoto\":\"Header_userPhoto__2qdm8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__7ZcFL\",\"messagesBlock\":\"Messages_messagesBlock__apHNP\",\"messageItem\":\"Messages_messageItem__2Rhsd\",\"nav\":\"Messages_nav__2f7yF\",\"active\":\"Messages_active__1xrJw\",\"spam\":\"Messages_spam__207yp\",\"authorized\":\"Messages_authorized__2lBBh\",\"image\":\"Messages_image__2RIOP\",\"text\":\"Messages_text__2S5ra\",\"name\":\"Messages_name__23zB-\",\"body\":\"Messages_body__1vSP3\",\"date\":\"Messages_date__3jZom\",\"sendField\":\"Messages_sendField__3tYjB\",\"viewed\":\"Messages_viewed__bJA9A\",\"showPrevMessages\":\"Messages_showPrevMessages__3K7nb\",\"showNextMessages\":\"Messages_showNextMessages__25m65\",\"btnsBlock\":\"Messages_btnsBlock__1AF0V\"};","import React from \"react\";\r\nimport style from './Menu.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype MenuPropsCount = {\r\n    newMessagesCount:number\r\n}\r\n\r\nexport const Menu = ({newMessagesCount,...props}:MenuPropsCount) => {\r\n    return(\r\n        <div className={style.menu + ' block'}>\r\n            <h3 className={style.title}>Menu</h3>\r\n            <nav className={style.navigation}>\r\n                <NavLink className={style.navLink} to={'/profile/me'}>Home</NavLink>\r\n                <NavLink className={style.navLink} to={'/posts'}>Post</NavLink>\r\n                <NavLink className={style.navLink} to={'/users'}>Users</NavLink>\r\n                <NavLink className={style.navLink} to={'/follow'}>Follow</NavLink>\r\n                <NavLink className={style.navLink} to={'/dialogs'}>\r\n                    Dialogs\r\n                    {newMessagesCount ? <small>{newMessagesCount}</small> : null}\r\n                </NavLink>\r\n            </nav>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../store/users-reducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fc44aa55-3392-48f7-a00e-41bc59417a62'\r\n    }\r\n})\r\n\r\ntype ResponseType = {}\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers: async (count: number, page: number) => {\r\n        return await instance.get(`/users?count=${count}&page=${page}`);\r\n    },\r\n    getFollowing: async () => {\r\n        const countUsers = 100;\r\n        let numbersOfPage = 0;\r\n        let following: UserType[] = [];\r\n        await instance.get(`/users`).then(res => {\r\n            numbersOfPage = Math.ceil(res.data.totalCount / countUsers);\r\n        });\r\n\r\n        for (let i = 1; i <= numbersOfPage; i++) {\r\n            await instance.get(`/users?count=${countUsers}&page=${i}`)\r\n                .then(res => {\r\n                    const users: UserType[] = res.data.items;\r\n                    following = [...following, ...users.filter(u => u.followed)]\r\n                })\r\n        }\r\n\r\n        return following;\r\n    }\r\n}","import {instance} from \"./users-api\";\r\n\r\nexport const authApi = {\r\n    loginName(){\r\n        return instance.get('/auth/me');\r\n    },\r\n    login(data:RequestType){\r\n        return instance.post('/auth/login',data);\r\n    },\r\n    logout(){\r\n        return instance.delete('/auth/login');\r\n    }\r\n}\r\n\r\nexport type RequestType = {\r\n    email:string\r\n    password:string\r\n    rememberMe?:boolean\r\n    captcha?:string\r\n}","import {instance} from \"./users-api\";\r\nimport {UserProfileType} from \"../store/profile-reducer\";\r\n\r\nexport const profileApi = {\r\n    getUserProfile(userID:number){\r\n        return instance.get(`/profile/${userID}`);\r\n    },\r\n    getUserStatus(userID:number){\r\n        return instance.get(`/profile/status/${userID}`);\r\n    },\r\n    updateUserProfile(profile:UserProfileType){\r\n        return instance.put(`/profile`,{profile});\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authApi, RequestType} from \"../api/auth-api\";\r\nimport {profileApi} from \"../api/profile-api\";\r\nimport {UserType} from \"./users-reducer\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nconst initialState: initialStateType = {\r\n    isLoggedIn: false,\r\n    loginName: null,\r\n    me: {\r\n        id: 0,\r\n        photo: null,\r\n    },\r\n    followings: []\r\n}\r\n\r\n\r\nexport const AuthReducer = (state: initialStateType = initialState, action: AuthReducerActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"login/AUTHORIZED\":\r\n            return {...state, loginName: action.loginName}\r\n        case \"login/SET-LOGIN-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"me/SET-ID\":\r\n            return {...state, me: {...state.me, id: action.id}}\r\n        case \"me/SET-PHOTO\":\r\n            return {...state, me: {...state.me, photo: action.photo}}\r\n        case \"me/GET-FOLLOWING\":\r\n            return {...state,followings:action.users as UserType[]}\r\n        case \"me/ADD-FOLLOWINGS\":\r\n            return {...state,followings:[...state.followings,action.user] as UserType[]}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const authorizedAC = (loginName: string | null) => ({type: 'login/AUTHORIZED', loginName} as const);\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-LOGIN-IN', value} as const);\r\nconst setAuthorizedIdAC = (id: number) => ({type: 'me/SET-ID', id} as const);\r\nconst setAuthorizedUserPhotoAC = (photo: string | null) => ({type: 'me/SET-PHOTO', photo} as const);\r\nconst addFollowingAC = (user: UserType) => ({type: 'me/ADD-FOLLOWINGS', user} as const);\r\nconst getFollowingAC = (users: UserType[]) => ({type:'me/GET-FOLLOWING',users} as const);\r\n\r\n//Thunks\r\nexport const authorizedTC = () => (dispatch: Dispatch) => {\r\n    authApi.loginName()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(authorizedAC(res.data.data.login));\r\n                dispatch(setAuthorizedIdAC(res.data.data.id));\r\n                dispatch(setIsLoggedInAC(true));\r\n\r\n                profileApi.getUserProfile(res.data.data.id)\r\n                    .then(res => {\r\n                        dispatch(setAuthorizedUserPhotoAC(res.data.photos.small));\r\n                    })\r\n            }\r\n        })\r\n}\r\nexport const setLoggedInTC = (data: RequestType) => (dispatch: Dispatch) => {\r\n    authApi.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAuthorizedIdAC(res.data.data.id));\r\n        }\r\n    })\r\n}\r\nexport const setLoggedOutTC = () => (dispatch: Dispatch) => {\r\n    authApi.logout().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(authorizedAC(null));\r\n            dispatch(setIsLoggedInAC(false));\r\n        }\r\n    })\r\n}\r\nexport const addFollowingTC = (count: number, page: number) => (dispatch: Dispatch) => {\r\n    usersAPI.getUsers(count, page)\r\n        .then(res => {\r\n            dispatch(addFollowingAC(res.data.items))\r\n        })\r\n}\r\nexport const getFollowingTC = () => (dispatch:Dispatch) => {\r\n    usersAPI.getFollowing()\r\n        .then(res => {\r\n            dispatch(getFollowingAC(res));\r\n        });\r\n\r\n}\r\n\r\n//Type\r\ntype initialStateType = {\r\n    isLoggedIn: boolean\r\n    loginName: null | string\r\n    me: {\r\n        id: number\r\n        photo: string | null\r\n    }\r\n    followings: UserType[]\r\n};\r\n\r\nexport type AuthReducerActionsTypes = ReturnType<typeof authorizedAC>\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAuthorizedIdAC>\r\n    | ReturnType<typeof setAuthorizedUserPhotoAC>\r\n    | ReturnType<typeof addFollowingAC>\r\n    | ReturnType<typeof getFollowingAC>;\r\n","import {instance} from \"./users-api\";\r\n\r\nexport const subscribeApi = {\r\n    checkFollow(userID:number){\r\n        return instance.get(`/follow/${userID}`);\r\n    },\r\n    follow(userID:number){\r\n        return instance.post(`/follow/${userID}`);\r\n    },\r\n    unfollow(userID:number){\r\n        return instance.delete(`/follow/${userID}`);\r\n    }\r\n}","import {usersAPI} from \"../api/users-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {subscribeApi} from \"../api/subscribe-api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    totalCount: 0,\r\n    currentPageNumber: 1,\r\n};\r\nexport const howShowUsersCount = 10;\r\n\r\n\r\nexport const UsersReducer = (state: UsersStateType = initialState, action: UsersReducerActionsTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case \"GET-USERS\":\r\n            return {...state, users: action.users};\r\n        case \"GET-TOTAL-COUNT\":\r\n            return {...state, totalCount: action.totalCount};\r\n        case \"SET-PAGE-NUMBER\":\r\n            return {...state, currentPageNumber: action.currentPageNumber}\r\n        case \"SET-FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => action.userID === u.id ? {...u, followed: action.isFollow} : u)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//ActionCreators\r\nexport const getUsersAC = (users: UserType[]) => ({type: 'GET-USERS', users} as const);\r\nexport const getTotalCountAC = (totalCount: number) => ({type: 'GET-TOTAL-COUNT', totalCount} as const);\r\nexport const setUserPageNumber = (currentPageNumber: number) => ({type: 'SET-PAGE-NUMBER', currentPageNumber} as const);\r\nexport const followUserAC = (userID: number, isFollow: boolean) => ({type: 'SET-FOLLOW', isFollow, userID} as const)\r\n\r\n//ThunkCreators\r\nexport const getUsersPageTC = (count: number, page: number) => (dispatch: Dispatch) => {\r\n    if (count === null) count = howShowUsersCount;\r\n    usersAPI.getUsers(count, page)\r\n        .then(res => {\r\n            dispatch(getUsersAC(res.data.items));\r\n            dispatch(getTotalCountAC(res.data.totalCount));\r\n            dispatch(setUserPageNumber(page));\r\n        })\r\n}\r\nexport const checkFollowUserTC = (userID: number) => (dispatch: Dispatch) => {\r\n    subscribeApi.checkFollow(userID)\r\n        .then(res => {\r\n            console.log(res);\r\n        })\r\n}\r\nexport const followUserTC = (userID: number) => (dispatch: Dispatch) => {\r\n    subscribeApi.follow(userID)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(followUserAC(userID, true));\r\n            }\r\n        })\r\n}\r\nexport const unfollowUserTC = (userID: number) => (dispatch: Dispatch) => {\r\n    subscribeApi.unfollow(userID)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(followUserAC(userID, false));\r\n            }\r\n        })\r\n}\r\n\r\n\r\n//Types\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    followed: boolean\r\n    uniqueUrlName: string | null\r\n}\r\nexport type UsersStateType = typeof initialState;\r\nexport type UsersReducerActionsTypes =\r\n    ReturnType<typeof getUsersAC>\r\n    | ReturnType<typeof getTotalCountAC>\r\n    | ReturnType<typeof setUserPageNumber>\r\n    | ReturnType<typeof followUserAC>;\r\n","import {Dispatch} from \"redux\";\r\nimport {profileApi} from \"../api/profile-api\";\r\n\r\nlet initialState = {\r\n    profile:{\r\n        aboutMe: '',\r\n        userId: 0,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        contacts: {\r\n            github: '',\r\n            vk: '',\r\n            facebook: '',\r\n            instagram: '',\r\n            twitter: '',\r\n            website: '',\r\n            youtube: '',\r\n            mainLink: '',\r\n        },\r\n\r\n        photos: {\r\n            small: null,\r\n            large: null\r\n        }\r\n    }\r\n} as ProfileReducerStateType;\r\n\r\nexport const ProfileReducer = (state: ProfileReducerStateType = initialState, action: ProfileReducerActionsTypes): ProfileReducerStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-PROFILE\":\r\n            return {...state, profile: action.userProfile}\r\n        case \"SET-USER-STATUS\":\r\n            return {...state, status: action.userStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Actions\r\nconst setUserProfileAC = (userProfile: UserProfileType) => ({type: 'SET-USER-PROFILE', userProfile} as const);\r\nconst setUserStatusAC = (userStatus: any) => ({type: 'SET-USER-STATUS', userStatus} as const);\r\n\r\n//Thunk\r\n\r\nexport const getUserProfileTC = (userID: number) => (dispatch: Dispatch) => {\r\n    profileApi.getUserProfile(userID)\r\n        .then(res => {\r\n            dispatch(setUserProfileAC(res.data));\r\n        })\r\n}\r\nexport const getUserStatusTC = (userID: number) => (dispatch: Dispatch) =>{\r\n    profileApi.getUserStatus(userID).then(res => {\r\n        dispatch(setUserStatusAC(res.data));\r\n    })\r\n}\r\nexport const updateUserProfileTC = (profile: UserProfileType) => (dispatch: Dispatch) =>{\r\n    profileApi.updateUserProfile(profile).then(res => {\r\n        console.log(res);\r\n    })\r\n}\r\n\r\n//Types\r\nexport type ProfileReducerStateType = {\r\n    profile: UserProfileType\r\n    status: any\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe: string | null\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\nexport type ProfileReducerActionsTypes = ReturnType<typeof setUserProfileAC> | ReturnType<typeof setUserStatusAC>;\r\n","import {instance} from \"./users-api\";\r\n\r\nexport const dialogsApi = {\r\n    getDialogs() {\r\n        return instance.get(`/dialogs`);\r\n    },\r\n    startOrRefreshDialogs(userID: number) {\r\n        return instance.put(`/dialogs/${userID}`);\r\n    },\r\n    getMessages(userID: number, pageSize: number, count: number) {\r\n        return instance.get(`dialogs/${userID}/messages?count=${pageSize}&page=${count}`);\r\n    },\r\n    sendMessages(userID: number, body: string) {\r\n        return instance.post(`dialogs/${userID}/messages`, {body: body});\r\n    },\r\n    checkIsViewedMessage(messageID: string) {\r\n        return instance.get<boolean>(`dialogs/messages/${messageID}/viewed`).then(res => res.data);\r\n    },\r\n    removeMessage(messageID: string) {\r\n        return instance.delete(`dialogs/messages/${messageID}`)\r\n    },\r\n    addMessageToSpam(messageID: string) {\r\n        return instance.post(`dialogs/messages/${messageID}/spam`);\r\n    },\r\n\r\n    getNewMessages() {\r\n        return instance.get('dialogs/messages/new/count');\r\n    },\r\n    getNewestMessages(userID: number, date: string) {\r\n        console.log(`dialogs/${userID}/messages/new?newerThen=${date}`)\r\n        return instance.get(`dialogs/${userID}/messages/new?newerThen=${date}`)\r\n    },\r\n    restoreMessage(messageID: string) {\r\n        return instance.put(`dialogs/messages/${messageID}/restore`);\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {dialogsApi} from \"../api/dialogs-api\";\r\nimport {RootReducerType} from \"./store\";\r\n\r\nexport const messagesPageSize = 20;\r\nexport const dialogsPageSize = 10;\r\n\r\nlet dialogsInitialState = {\r\n    dialogs: [] as DialogType[],\r\n    totalCountDialogs: 1,\r\n    messages: {\r\n        items: [] as MessageType[],\r\n        totalCountMessages: 1,\r\n        userID: 0,\r\n        newMessagesCount: 0\r\n    },\r\n    sectionSelected: 'messages' as SectionSelectedType,\r\n    spam: [] as MessageType[]\r\n}\r\n\r\nexport const DialogsReducer = (state: DialogsInitialStateType = dialogsInitialState, action: DialogsReducerActionTypes): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-DIALOGS\":\r\n            return {...state, dialogs: [...action.dialogs]}\r\n        case \"messages/SET-MESSAGES\":\r\n            return {...state, messages: {...state.messages, items: action.messages}}\r\n        case \"messages/CLEAR-MESSAGES\":\r\n            return {...state, messages: {...state.messages, items: []}}\r\n        case \"messages/ADD-MESSAGE\":\r\n            return {...state, messages: {...state.messages, items: [...state.messages.items, action.message]}}\r\n        case \"messages/SET-USER-ID\":\r\n            return {...state, messages: {...state.messages, userID: action.ID}}\r\n        case \"messages/SET-TOTAL-COUNT\":\r\n            return {...state, messages: {...state.messages, totalCountMessages: action.count}}\r\n        case \"messages/SET-NEW-MESSAGES-COUNT\":\r\n            return {...state, messages: {...state.messages, newMessagesCount: action.count}}\r\n        case \"messages/REMOVE=MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: {...state.messages, items: state.messages.items.filter(i => i.id !== action.messageID)}\r\n            }\r\n        case \"select/SET-SELECT\":\r\n            return {...state, sectionSelected: action.select}\r\n        case \"spam/ADD-TO-SPAM\":\r\n            return {...state, spam: [...state.spam, action.message]}\r\n        case \"spam/REMOVE-FROM-SPAM\":\r\n            return {...state,spam:state.spam.filter(m => m.id !== action.messageID)}\r\n        case \"messages/SET-VIEW\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: state.messages.items.map(m => m.id === action.messageID ? {\r\n                        ...m,\r\n                        viewed: action.isViewed\r\n                    } : m)\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Actions\r\n\r\nconst setDialogsAC = (dialogs: Array<DialogType>) => ({type: 'SET-DIALOGS', dialogs} as const);\r\nconst setMessagesAC = (messages: Array<MessageType>) => ({type: 'messages/SET-MESSAGES', messages} as const);\r\nexport const clearMessagesAC = () => ({type: 'messages/CLEAR-MESSAGES'} as const);\r\nconst setUserIdForMessageAC = (ID: number) => ({type: 'messages/SET-USER-ID', ID} as const);\r\nconst setTotalCountForMessage = (count: number) => ({type: 'messages/SET-TOTAL-COUNT', count} as const);\r\nconst addMessageAC = (message: MessageType) => ({type: 'messages/ADD-MESSAGE', message} as const);\r\nconst setNewMessagesCountAC = (count: number) => ({type: 'messages/SET-NEW-MESSAGES-COUNT', count} as const);\r\nconst setIsViewedMessage = (messageID: string, isViewed: boolean) => ({\r\n    type: 'messages/SET-VIEW',\r\n    messageID,\r\n    isViewed\r\n} as const);\r\nconst removeMessageAC = (messageID: string) => ({type: 'messages/REMOVE=MESSAGE', messageID} as const);\r\nexport const setSectionSelectAC = (select: SectionSelectedType) => ({type: 'select/SET-SELECT', select} as const);\r\nconst addMessageToSpamAC = (message: MessageType) => ({type: 'spam/ADD-TO-SPAM', message} as const);\r\nconst removeFromSpamAC = (messageID: string) => ({type: 'spam/REMOVE-FROM-SPAM', messageID} as const);\r\n\r\n//Thunks\r\nexport const getDialogsTC = () => (dispatch: Dispatch) => {\r\n    dialogsApi.getDialogs()\r\n        .then(res => {\r\n            dispatch(setDialogsAC(res.data));\r\n        })\r\n}\r\nexport const startOrRefreshDialogsTC = (userID: number) => (dispatch: Dispatch) => {\r\n    dialogsApi.startOrRefreshDialogs(userID).then(res => res);\r\n}\r\nexport const getMessagesTC = (userID: number, pageSize: number, count: number) => async (dispatch: Dispatch) => {\r\n    dispatch(setUserIdForMessageAC(userID));\r\n\r\n    await dialogsApi.getMessages(userID, pageSize, count)\r\n        .then(res => {\r\n            dispatch(setTotalCountForMessage(res.data.totalCount));\r\n            dispatch(setMessagesAC(res.data.items));\r\n        })\r\n}\r\nexport const addMessagesTC = (userID: number, body: string) => (dispatch: Dispatch) => {\r\n    dialogsApi.sendMessages(userID, body)\r\n        .then(res => {\r\n            dispatch(addMessageAC(res.data.data.message))\r\n        })\r\n}\r\nexport const checkIsViewedMessageTC = (messageID: string) => (dispatch: Dispatch) => {\r\n    dialogsApi.checkIsViewedMessage(messageID)\r\n        .then(res => {\r\n            dispatch(setIsViewedMessage(messageID, res));\r\n        })\r\n}\r\nexport const getNewMessagesTC = () => (dispatch: Dispatch) => {\r\n    dialogsApi.getNewMessages()\r\n        .then(res => {\r\n            dispatch(setNewMessagesCountAC(res.data));\r\n        })\r\n}\r\nexport const getNewestMessagesTC = (userID: number, date: string) => (dispatch: Dispatch) => {\r\n    dialogsApi.getNewestMessages(userID, date)\r\n        .then(res => {\r\n            console.log(res);\r\n        })\r\n}\r\nexport const removeMessageTC = (messageID: string) => (dispatch: Dispatch) => {\r\n    dialogsApi.removeMessage(messageID)\r\n        .then(res => {\r\n            dispatch(removeMessageAC(messageID));\r\n        })\r\n}\r\nexport const addMessageToSpamTC = (messageID: string) => (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n    const message = getState().dialogsPage.messages.items.find(m => m.id === messageID);\r\n    if (message) {\r\n        dialogsApi.addMessageToSpam(messageID)\r\n            .then(res => {\r\n                dispatch(addMessageToSpamAC(message));\r\n                dispatch(removeMessageAC(messageID));\r\n            })\r\n    }\r\n}\r\nexport const restoreMessageTC = (messageID: string) => (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n    dialogsApi.restoreMessage(messageID)\r\n        .then(res => {\r\n            dispatch(removeFromSpamAC(messageID));\r\n        })\r\n}\r\n\r\n//Types\r\n\r\nexport type DialogsReducerActionTypes = ReturnType<typeof setDialogsAC>\r\n    | ReturnType<typeof setMessagesAC>\r\n    | ReturnType<typeof addMessageAC>\r\n    | ReturnType<typeof setUserIdForMessageAC>\r\n    | ReturnType<typeof setTotalCountForMessage>\r\n    | ReturnType<typeof setNewMessagesCountAC>\r\n    | ReturnType<typeof setIsViewedMessage>\r\n    | ReturnType<typeof clearMessagesAC>\r\n    | ReturnType<typeof removeMessageAC>\r\n    | ReturnType<typeof setSectionSelectAC>\r\n    | ReturnType<typeof removeFromSpamAC>\r\n    | ReturnType<typeof addMessageToSpamAC>;\r\n\r\ntype DialogsInitialStateType = typeof dialogsInitialState;\r\n\r\nexport type DialogType = {\r\n    hasNewMessages: boolean\r\n    id: number\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: {\r\n        small: null | string\r\n        large: null | string\r\n    }\r\n    userName: string\r\n}\r\nexport type MessageType = {\r\n    addedAt: string\r\n    body: string\r\n    id: string\r\n    recipientId: number\r\n    senderId: number\r\n    senderName: string\r\n    translatedBody: null\r\n    viewed: boolean\r\n}\r\n\r\nexport type SectionSelectedType = 'messages' | 'spam';","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {checkFollowUserTC, followUserTC, unfollowUserTC, UserType} from \"../../store/users-reducer\";\r\nimport {getUserProfileTC, getUserStatusTC} from \"../../store/profile-reducer\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {getMessagesTC, startOrRefreshDialogsTC} from \"../../store/dialogs-reducer\";\r\n\r\n\r\nclass UsersItem extends React.Component<UserItemPropsType> {\r\n    shouldComponentUpdate(nextProps: Readonly<UserItemPropsType>): boolean {\r\n        return this.props.isFollow !== nextProps.isFollow\r\n    }\r\n\r\n    onClickHandler(userID: number) {\r\n        this.props.getUserProfile(userID);\r\n        this.props.getUserStatus(userID);\r\n    }\r\n\r\n    follow() {\r\n        this.props.follow(this.props.id);\r\n        console.log(this.props.followings);\r\n    }\r\n\r\n    unfollow() {\r\n        this.props.unfollow(this.props.id);\r\n    }\r\n\r\n    writeMessage() {\r\n        this.props.startOrRefreshDialogs(this.props.id);\r\n        this.props.getMessages(this.props.id, 20, 1);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`block ${s.usersItem}`}>\r\n                <div className={s.image}>\r\n                    <NavLink\r\n                        onClick={() => {\r\n                            this.onClickHandler(this.props.id)\r\n                        }}\r\n                        title={this.props.name}\r\n                        to={`/profile/${this.props.id}`}\r\n                    >\r\n                        <img\r\n                            src={this.props.photoUrl || 'https://vjoy.cc/wp-content/uploads/2020/12/1133ea1de4e69bd760056f2c04e90920.png'}/>\r\n                    </NavLink>\r\n\r\n                </div>\r\n                <div className={s.description}>\r\n                    <NavLink\r\n                        onClick={() => {\r\n                            this.onClickHandler(this.props.id)\r\n                        }}\r\n                        className={s.userName}\r\n                        title={this.props.name}\r\n                        to={`/profile/${this.props.id}`}\r\n                    >\r\n                        {this.props.name}\r\n                    </NavLink>\r\n                    <div className={s.buttonsBlock}>\r\n                        {this.props.isFollow\r\n                            ? <button className={s.followBtn} onClick={this.unfollow.bind(this)}>\r\n                                Unfollow\r\n                            </button>\r\n                            : <button className={s.followBtn} onClick={this.follow.bind(this)}>Follow</button>\r\n                        }\r\n                        <NavLink\r\n                            title=''\r\n                            to={`/dialogs/messages/${this.props.name}`}\r\n                            onClick={this.writeMessage.bind(this)}\r\n                        >\r\n                            Message\r\n                        </NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    getUserProfile: getUserProfileTC,\r\n    getUserStatus: getUserStatusTC,\r\n    checkFollow: checkFollowUserTC,\r\n    follow: followUserTC,\r\n    unfollow: unfollowUserTC,\r\n    startOrRefreshDialogs: startOrRefreshDialogsTC,\r\n    getMessages:getMessagesTC\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToProps => ({\r\n    followings: state.auth.followings\r\n})\r\n\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, OwnUserItemType, RootReducerType>(mapStateToProps, mapDispatchToProps)(UsersItem);\r\n\r\n//Types\r\n\r\ntype UserItemPropsType = MapDispatchToProps & MapStateToProps & OwnUserItemType;\r\n\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userID: number) => void\r\n    getUserStatus: (userID: number) => void\r\n    checkFollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    startOrRefreshDialogs: (userID: number) => void\r\n    getMessages: (userID: number, count: number, page: number) => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    followings: UserType[]\r\n}\r\n\r\ntype OwnUserItemType = {\r\n    id: number\r\n    photoUrl: string | null\r\n    name: string\r\n    isFollow: boolean\r\n}","import React from \"react\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {addFollowingTC,getFollowingTC} from \"../../store/auth-reducer\";\r\nimport UsersItem from \"../users/UsersItem\";\r\nimport {UserType} from \"../../store/users-reducer\";\r\n\r\nclass Follow extends React.Component<FollowInterface> {\r\n    componentWillMount() {\r\n        this.props.getFollowing();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<FollowInterface>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return this.props.followings !== nextProps.followings\r\n    }\r\n\r\n    componentWillUpdate(nextProps: Readonly<FollowInterface>, nextState: Readonly<{}>, nextContext: any) {\r\n        this.props.getFollowing();\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.followings.map(user => {\r\n                return (\r\n                    <UsersItem\r\n                        key={user.id}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        photoUrl={user.photos.small}\r\n                        isFollow={user.followed}\r\n                    />\r\n                )\r\n            })}\r\n        </div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToProps => ({\r\n    followings: state.auth.followings,\r\n    totalCount: state.usersPage.totalCount\r\n})\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    addFollowing: addFollowingTC,\r\n    getFollowing:getFollowingTC\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, RootReducerType>(mapStateToProps, mapDispatchToProps)(Follow);\r\n\r\n//Types\r\n\r\ninterface FollowInterface {\r\n    followings: UserType[]\r\n    totalCount: number\r\n    addFollowing: (count: number, page: number) => void\r\n    // addFollowing:(count: number, page: number) => void\r\n    getFollowing: () => void\r\n}\r\n\r\ntype MapStateToProps = {\r\n    followings: UserType[]\r\n    totalCount: number\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addFollowing: (count: number, page: number) => void\r\n    getFollowing: () => void\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableItemType = {\r\n    value: string\r\n    editMode: boolean\r\n    onChangeCallBack: (value: string) => void\r\n}\r\n\r\nexport const EditableItem = ({value,onChangeCallBack,editMode,...props}: EditableItemType) => {\r\n    let [error, setError] = useState(false);\r\n\r\n    const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeCallBack(e.currentTarget.value);\r\n        if(!e.currentTarget.value.trim()){\r\n            setError(true);\r\n        } else {\r\n            setError(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <div className={error ? 'error' : ''}>\r\n                    <input\r\n                        type='text'\r\n                        value={value}\r\n                        onChange={onChangeValue}\r\n                    />\r\n                </div>\r\n                : <span>{value}</span>}\r\n        </>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {EditableItem} from \"../feature/EditableItem\";\r\n\r\ntype PostPropsType = {\r\n    id: number,\r\n    title: string,\r\n    text: string\r\n    removePostCallBack: (id: number) => void\r\n    changeTitleCallBack: (id: number, title: string) => void\r\n    changeTextCallBack: (id: number, title: string) => void\r\n}\r\n\r\nexport const Post = ({id, title, text, ...props}: PostPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    const removePost = () => {\r\n        props.removePostCallBack(id);\r\n    }\r\n\r\n    const changeTitle = (newTitle: string) => {\r\n        props.changeTitleCallBack(id, newTitle);\r\n    }\r\n\r\n    const changeText = (newText: string) => {\r\n        props.changeTextCallBack(id, newText);\r\n    }\r\n\r\n    const toggleEditMode = () =>{\r\n        if(title.trim() && text.trim()){\r\n            setEditMode(!editMode);\r\n        }\r\n    }\r\n    console.log(title + ',' + text);\r\n    return (<div className={'block ' + s.postsItem} key={id}>\r\n        <div className={s.postsItemContent}>\r\n            {<h6 className={s.postTitle}>\r\n                <EditableItem\r\n                    editMode={editMode}\r\n                    value={title}\r\n                    onChangeCallBack={changeTitle}\r\n                />\r\n            </h6>}\r\n            <div>\r\n                <EditableItem editMode={editMode} value={text} onChangeCallBack={changeText}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={s.btnsBlock}>\r\n            <button onClick={toggleEditMode}>Edit post</button>\r\n            <button className={s.deletePost} onClick={removePost}>X</button>\r\n        </div>\r\n\r\n    </div>)\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    onChangeTextCallBack: (newText: string) => void\r\n    text: string\r\n    addPost: () => void\r\n    error?: string[] | []\r\n    className?: string\r\n    setError?:(newError:string | string[] | []) => void\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    let finishClassName = props.error && props.error.some(e => e === 'Text error!') ? props.className + ' error' : props.className;\r\n\r\n    const onChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onChangeTextCallBack(e.currentTarget.value);\r\n        props.error && props.setError && props.setError(props.error.filter(e => e !== 'Text error!'));\r\n    }\r\n\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            props.addPost();\r\n        }\r\n    }\r\n    return (\r\n        <div className={finishClassName}>\r\n            <textarea\r\n                onKeyPress={onKeyPress}\r\n                onChange={onChangeText}\r\n                value={props.text}\r\n                placeholder={'Описание поста'}\r\n            />\r\n            <span>{props.error && props.error.some(e => e === 'Text error!') ? 'Поле текста не может быть пустым' : ''}</span>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    onChangeTitleCallBack: (newTitle: string) => void\r\n    title: string\r\n    addPost: () => void\r\n    error:string[] | []\r\n    className?:string\r\n    setError:(newError:string | [] | string[]) => void\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    let finishClassName = props.error.some(e => e === 'Title error!') ? props.className + ' error' : props.className;\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeTitleCallBack(e.currentTarget.value);\r\n        props.setError(props.error.filter(e => e !== 'Title error!'));\r\n    }\r\n\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            props.addPost();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={finishClassName}>\r\n            <input\r\n                onKeyPress={onKeyPress}\r\n                onChange={onChangeTitle}\r\n                value={props.title}\r\n                placeholder={'Заголовок поста...'}\r\n                type={'text'}\r\n            />\r\n            <span>{props.error.some(e => e === 'Title error!') ? 'Поле заголовка не может быть пустым' : ''}</span>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Textarea} from \"../feature/Textarea\";\r\nimport {Input} from \"../feature/Input\";\r\nimport s from \"../myPosts/MyPosts.module.css\";\r\n\r\ntype AddItemPropsType = {\r\n    addPostCallBack: (title: string, text: string) => void\r\n}\r\n\r\nexport const AddItem = (props: AddItemPropsType) => {\r\n    let [text, setText] = useState('');\r\n    let [title, setTitle] = useState('');\r\n    let [error,setError] = useState<string[] | []>([]);\r\n\r\n\r\n    const onChangeTitleCallBack = (newTitle: string) => {\r\n        setTitle(newTitle);\r\n    }\r\n\r\n    const onChangeTextCallBack = (newText: string) => {\r\n        setText(newText);\r\n    }\r\n\r\n    const changeError = (newError:string | string[] | []) => {\r\n        if(typeof newError === 'string'){\r\n            let errors = [...error];\r\n            errors.push(newError);\r\n            setError(errors);\r\n        }\r\n\r\n        else {\r\n            setError(newError);\r\n        }\r\n    }\r\n\r\n    const addPost = () => {\r\n        if (text && title){\r\n            props.addPostCallBack(title, text);\r\n            setError([]);\r\n        } else{\r\n            let errors = [];\r\n            if(!title) errors.push('Title error!');\r\n            if(!text) errors.push('Text error!')\r\n            setError(errors);\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <Input\r\n            error={error}\r\n            addPost={addPost}\r\n            title={title}\r\n            onChangeTitleCallBack={onChangeTitleCallBack}\r\n            className={s.inputBlock}\r\n            setError={changeError}\r\n        />\r\n        <Textarea\r\n            error={error}\r\n            addPost={addPost}\r\n            onChangeTextCallBack={onChangeTextCallBack}\r\n            text={text}\r\n            className={s.textareaBlock}\r\n            setError={changeError}\r\n        />\r\n        <button onClick={addPost}>Add post</button>\r\n    </>)\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {addPostAC, PostsStateType, removePostAC} from \"../../store/posts-reducer\";\r\nimport {AddItem} from \"../addItem/AddItem\";\r\n\r\ntype PostsPropType = {\r\n    posts:PostsStateType\r\n    addPost: (title: string, text: string) => void\r\n    removePost: (id: number) => void\r\n    changeTitle:(id: number, title: string) => void\r\n    changeText:(id: number, title: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = (props: PostsPropType) => {\r\n    return (\r\n        <div>\r\n            <div className={'block ' + s.addPosts}>\r\n                <AddItem addPostCallBack={props.addPost}/>\r\n            </div>\r\n\r\n            <div className={s.postsContainer}>\r\n                {props.posts.map(post => <Post\r\n                    key={post.id}\r\n                    changeTitleCallBack={props.changeTitle}\r\n                    changeTextCallBack={props.changeText}\r\n                    removePostCallBack={props.removePost}\r\n                    id={post.id} title={post.title}\r\n                    text={post.text}\r\n                />)}\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport {ThunkAction} from \"redux-thunk/src/types\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    title: string\r\n    text: string\r\n}\r\n\r\nlet initialState = [\r\n    {id: 4, text: 'text 4', title: 'post 4'},\r\n    {id: 3, text: 'text 3', title: 'post 3'},\r\n    {id: 2, text: 'text 2', title: 'post 2'},\r\n    {id: 1, text: 'text 1', title: 'post 1'}\r\n]\r\n\r\nexport type PostsStateType = PostType[];\r\n\r\nexport const PostsReducer = (state:PostsStateType = initialState, action: PostsReducerActionsTypes):PostsStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return [{id: 5, title: action.title, text: action.text}, ...state];\r\n        case 'REMOVE-POST':\r\n            return state.filter(f => f.id !== action.id);\r\n        case 'CHANGE-TITLE':\r\n            return state.map(m => m.id === action.id ? {...m, title: action.title} : m);\r\n        case 'CHANGE-TEXT':\r\n            return state.map(m => m.id === action.id ? {...m, text: action.text} : m);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type PostsReducerActionsTypes = addPostACType | removePostACType | changeTitleACType | changeTextACType;\r\n\r\ntype addPostACType = ReturnType<typeof addPostAC>;\r\nexport const addPostAC = (title: string, text: string) => ({type: 'ADD-POST', title, text} as const);\r\n\r\ntype removePostACType = ReturnType<typeof removePostAC>;\r\nexport const removePostAC = (id: number) => ({type: 'REMOVE-POST', id} as const);\r\n\r\ntype changeTitleACType = ReturnType<typeof changeTitleAC>;\r\nexport const changeTitleAC = (id: number, title: string) => ({type: 'CHANGE-TITLE', title, id} as const);\r\n\r\ntype changeTextACType = ReturnType<typeof changeTextAC>;\r\nexport const changeTextAC = (id: number, text: string) => ({type: 'CHANGE-TEXT', text, id} as const);\r\n\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {\r\n    addPostAC,\r\n    changeTextAC,\r\n    changeTitleAC, PostsStateType,\r\n    PostType,\r\n    removePostAC\r\n} from \"../../store/posts-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ninterface MyPostsContainerProps {\r\n    posts:PostsStateType\r\n    addPost: (title: string, text: string) => void\r\n    removePost: (id: number) => void\r\n    changeTitle:(id: number, title: string) => void\r\n    changeText:(id: number, text: string) => void\r\n}\r\n\r\ntype MapDispatchType = {\r\n    addPost:(title: string, text: string) => void\r\n    removePost:(id: number) => void\r\n    changeTitle:(id: number, title: string) => void\r\n    changeText:(id: number, text: string) => void\r\n}\r\n\r\ntype MapStateType = {\r\n    posts:PostType[]\r\n}\r\n\r\nclass MyPostsClass extends React.Component<MyPostsContainerProps> {\r\n    render() {\r\n        console.log(this.props);\r\n        return <MyPosts {...this.props}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateType => {\r\n    return {\r\n        posts:state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchType => {\r\n    return {\r\n        addPost(title: string, text: string) {\r\n            dispatch(addPostAC(title, text));\r\n        },\r\n\r\n        removePost(id: number) {\r\n            dispatch(removePostAC(id));\r\n        },\r\n\r\n        changeTitle(id: number, title: string) {\r\n            dispatch(changeTitleAC(id, title));\r\n        },\r\n\r\n        changeText(id: number, text: string) {\r\n            dispatch(changeTextAC(id, text));\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPostsClass);","import React from \"react\";\r\nimport {UserType} from \"../../store/users-reducer\";\r\nimport s from './Users.module.css';\r\nimport UsersItem from \"./UsersItem\";\r\n\r\n\r\ntype UsersPropType = {\r\n    users: UserType[]\r\n    totalCount: number\r\n    currentPageNumber: number\r\n    showUsersCount: number\r\n    getUsers: (count: number, page: number) => void\r\n    getUserProfile: (userID: number) => void\r\n    getUserStatus: (userID: number) => void\r\n    checkFollow: (userID: number) => void\r\n}\r\n\r\nexport const Users = (\r\n    {\r\n        users, totalCount, currentPageNumber, showUsersCount, getUsers, getUserProfile, getUserStatus,\r\n        checkFollow, ...props\r\n    }: UsersPropType\r\n) => {\r\n    const numberOfPage = Math.ceil(totalCount / showUsersCount);\r\n    const buttonsForUserPage: JSX.Element[] = [];\r\n\r\n    const createsButtons = (start: number, end: number) => {\r\n        for (let i = start; i <= end; i++) {\r\n            const finalClassName = i === currentPageNumber ? `${s.showPageBtn} ${s.active}` : `${s.showPageBtn}`;\r\n            buttonsForUserPage.push(\r\n                <button\r\n                    key={i + ' showPageNumber'}\r\n                    className={finalClassName}\r\n                    onClick={() => {\r\n                        onClickHandler(i)\r\n                    }}\r\n                >\r\n                    {i}\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    if (currentPageNumber < 6) {\r\n        createsButtons(1, 10);\r\n    } else if (currentPageNumber > 5 && currentPageNumber < numberOfPage - 5) {\r\n        createsButtons(currentPageNumber - 4, currentPageNumber + 5);\r\n    } else if (currentPageNumber >= numberOfPage - 5) {\r\n        createsButtons(numberOfPage - 9, numberOfPage);\r\n    }\r\n\r\n    const onClickHandler = (page: number) => {\r\n        getUsers(showUsersCount, page);\r\n    }\r\n    return (\r\n        <div>\r\n            {users.map(user => {\r\n                return (\r\n                    <UsersItem\r\n                        key={user.id}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        photoUrl={user.photos.small}\r\n                        isFollow={user.followed}\r\n            />\r\n            )\r\n            })}\r\n            <div className={s.showPageBtnsBlock}>\r\n                {buttonsForUserPage}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {getUsersPageTC, checkFollowUserTC, UserType} from \"../../store/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {getUserProfileTC, getUserStatusTC, updateUserProfileTC, UserProfileType} from \"../../store/profile-reducer\";\r\n\r\ninterface UsersInterface {\r\n    users: UserType[]\r\n    currentPageNumber:number\r\n    totalCount: number\r\n    showUsersCount: number\r\n    getUsers: (count: number, page: number) => void\r\n    getUserProfile:(userID:number) => void\r\n    getUserStatus:(userID:number) => void\r\n    checkFollow:(userID:number) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    users: UserType[];\r\n    totalCount: number\r\n    currentPageNumber:number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUsers: (count: number, page: number) => void\r\n    getUserProfile:(userID:number) => void\r\n    getUserStatus:(userID:number) => void\r\n    checkFollow:(userID:number) => void\r\n}\r\ntype OwnPropsType = {\r\n    showUsersCount: number\r\n}\r\n\r\n\r\nclass UsersClassComponent extends React.Component<UsersInterface> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.showUsersCount,this.props.currentPageNumber);\r\n    }\r\n\r\n    render() {\r\n        return <Users {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPageNumber:state.usersPage.currentPageNumber\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n    getUsers: getUsersPageTC,\r\n    getUserProfile:getUserProfileTC,\r\n    getUserStatus:getUserStatusTC,\r\n    checkFollow:checkFollowUserTC\r\n}\r\n\r\nexport const UsersContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootReducerType>\r\n(mapStateToProps, mapDispatchToProps)(UsersClassComponent)","import React from \"react\";\r\nimport {UserProfileType} from \"../../store/profile-reducer\";\r\nimport s from './Profile.module.css';\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType\r\n    status:any\r\n}\r\n\r\nexport const Profile = (\r\n    {profile,status,...props}: ProfilePropsType\r\n) => {\r\n    if (profile) {\r\n        return (\r\n            <div className={s.profile}>\r\n                <div className={s.profileImage}>\r\n                    <img src={profile.photos.large || 'https://vjoy.cc/wp-content/uploads/2020/12/1133ea1de4e69bd760056f2c04e90920.png'}/>\r\n                </div>\r\n                <div>\r\n                    <h3>{profile.fullName}</h3>\r\n                    <div>{status}</div>\r\n                    <div>{profile.aboutMe}</div>\r\n                    <div>{profile.lookingForAJob ? profile.lookingForAJobDescription : null}</div>\r\n                    <div>\r\n                        <h4>Контакты:</h4>\r\n                        <ul>\r\n                            {profile.contacts.github ? <li>github: ${profile.contacts.github}</li> : null}\r\n                            {profile.contacts.vk ? <li>vk: ${profile.contacts.vk}</li> : null}\r\n                            {profile.contacts.facebook ? <li>facebook: ${profile.contacts.facebook}</li> : null}\r\n                            {profile.contacts.instagram ? <li>instagram: ${profile.contacts.instagram}</li> : null}\r\n                            {profile.contacts.twitter ? <li>twitter: ${profile.contacts.twitter}</li> : null}\r\n                            {profile.contacts.website ? <li>website: ${profile.contacts.website}</li> : null}\r\n                            {profile.contacts.youtube ? <li>youtube: ${profile.contacts.youtube}</li> : null}\r\n                            {profile.contacts.mainLink ? <li>mainLink: ${profile.contacts.mainLink}</li> : null}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <h3>{undefined}</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {getUserProfileTC, updateUserProfileTC, UserProfileType} from \"../../store/profile-reducer\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface ProfileInterface {\r\n    profile:UserProfileType\r\n    status:any\r\n    getUserProfile:(userID:number) => void\r\n    updateUserProfile:(profile:UserProfileType) => void\r\n    userID?:number\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n    return {\r\n        profile:state.profilePage.profile,\r\n        status:state.profilePage.status\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n    getUserProfile:getUserProfileTC,\r\n    updateUserProfile:updateUserProfileTC\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileInterface> {\r\n    componentWillMount() {\r\n        if(this.props.userID){\r\n            this.props.getUserProfile(this.props.userID);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}/>;\r\n    }\r\n}\r\n\r\n//Types \r\n\r\ntype MapStateToPropsType = {\r\n    profile:UserProfileType\r\n    status:any\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile:(userID:number) => void\r\n    updateUserProfile:(profile:UserProfileType) => void\r\n}\r\n\r\nexport default connect<MapStateToPropsType,MapDispatchToPropsType,{userID?:number},RootReducerType>\r\n(mapStateToProps,mapDispatchToProps)(ProfileContainer)","import React from \"react\";\r\nimport ProfileContainer from \"./ProfileContainer\";\r\n\r\ntype MyProfileProps = {\r\n    id:number\r\n}\r\n\r\nexport const MyProfile = ({id}:MyProfileProps) => {\r\n    return (\r\n        <div>\r\n            <ProfileContainer userID={id}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\n\r\ntype HeaderPropsType = {\r\n    loginName: null | string\r\n    logout:() => void\r\n    isLoggedIn:boolean\r\n    photo: string | null\r\n}\r\n\r\nexport const Header = (props:HeaderPropsType) => {\r\n    const url = props.photo !== null ? props.photo : 'https://vjoy.cc/wp-content/uploads/2020/12/1133ea1de4e69bd760056f2c04e90920.png';\r\n    return (\r\n        <header className={style.header}>\r\n            <div className={style.userPhoto}>\r\n                {props.isLoggedIn ? <img src={url}/> : null}\r\n            </div>\r\n            {\r\n                props.loginName !== null\r\n                    ? <button onClick={()=> props.logout()}> {props.loginName} </button>\r\n                    : <button>Login</button>\r\n            }\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {authorizedTC, setLoggedInTC, setLoggedOutTC} from \"../../store/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Header} from \"./Header\";\r\nimport {RequestType} from \"../../api/auth-api\";\r\nimport {getUserProfileTC} from \"../../store/profile-reducer\";\r\n\r\ninterface HeaderInterface {\r\n    login: (data: RequestType) => void\r\n    logout: () => void\r\n    authorized: () => void\r\n    loginName: null | string\r\n    isLoggedIn: boolean\r\n    photo: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderInterface> {\r\n    shouldComponentUpdate(nextProps: Readonly<HeaderInterface>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return this.props.isLoggedIn !== nextProps.isLoggedIn\r\n            || this.props.loginName !== nextProps.loginName\r\n            || this.props.photo !== nextProps.photo\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<HeaderInterface>, prevState: Readonly<{}>, snapshot?: any) {\r\n        this.props.authorized();\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.authorized();\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>;\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    loginName: null | string\r\n    isLoggedIn: boolean\r\n    photo: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (data: RequestType) => void\r\n    logout: () => void\r\n    authorized: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n    return {\r\n        loginName: state.auth.loginName,\r\n        photo: state.auth.me.photo,\r\n        isLoggedIn: state.auth.isLoggedIn\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    authorized: authorizedTC,\r\n    login: setLoggedInTC,\r\n    logout: setLoggedOutTC,\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReducerType>(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import s from './Login.module.css';\r\nimport { useFormik} from \"formik\";\r\nimport {RequestType} from \"../../../api/auth-api\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype LoginPropsType = {\r\n    login: (data: RequestType) => void\r\n    isLoggedIn: boolean\r\n}\r\n\r\n\r\nexport const Login = ({login,isLoggedIn}:LoginPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email field is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if(!values.password){\r\n                errors.password = 'Password field is required';\r\n            } else if(values.password.length < 3){\r\n                errors.password = 'Длина пароля не может быть менее 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            login(values);\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn){\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                <label>\r\n                    <input {...formik.getFieldProps('email')}type='text' placeholder='Email'/>\r\n                    {formik.errors.email && <div className={s.error}>{formik.errors.email}</div>}\r\n                </label>\r\n\r\n                <label>\r\n                    <input autoComplete={''} {...formik.getFieldProps('password')} type='password' placeholder='Password'/>\r\n                    {formik.errors.password && <div className={s.error}>{formik.errors.password}</div>}\r\n                </label>\r\n                <label>\r\n                    <input {...formik.getFieldProps('rememberMe')} type='checkbox'/>RememberMe\r\n                </label>\r\n\r\n                <input type=\"submit\"/>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","export const howNumberOfPagesReselect = ({totalCount,pagesSize}:NumberOfPagesPropsType) => Math.ceil(totalCount / pagesSize);\r\nexport const correctDate = (fullDate:string) => {\r\n    let [date, time] = fullDate.replace('T', ' ').split(' ');\r\n    let dateArray = date.split('-');\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Des'];\r\n    return{\r\n        time:time.substring(0, 8),\r\n        date:`${dateArray[2]} ${months[+dateArray[1] - 1]} ${dateArray[0]}`\r\n    }\r\n}\r\n\r\nexport type NumberOfPagesPropsType = {\r\n    totalCount:number\r\n    pagesSize:number\r\n}","import {DialogType, getMessagesTC} from \"../../store/dialogs-reducer\";\r\nimport s from './Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {correctDate} from \"../../store/reselect/howNumberOfPagesReselect\";\r\n\r\nexport const DialogsItem = (props: DialogsItemPropsType) => {\r\n    const fullDate = correctDate(props.lastUserActivityDate)\r\n    const dispatch = useDispatch();\r\n    const onClickHandler = async ()  => {\r\n        await dispatch(getMessagesTC(props.id,20,1));\r\n    }\r\n    return (\r\n        <div className={`block ${s.dialogsItem}`}>\r\n            <div className={s.image}>\r\n                <NavLink\r\n                    title={props.userName}\r\n                    to={`/dialogs/${props.id}/messages`}\r\n                    onClick={onClickHandler}\r\n                >\r\n                    <img\r\n                        alt={props.userName}\r\n                        src={props.photos.small || 'https://vjoy.cc/wp-content/uploads/2020/12/1133ea1de4e69bd760056f2c04e90920.png'}/>\r\n                </NavLink>\r\n\r\n            </div>\r\n            <div className={s.description}>\r\n                <NavLink\r\n                    className={s.userName}\r\n                    title={props.userName}\r\n                    to={`/dialogs/messages/${props.userName}`}\r\n                    onClick={onClickHandler}\r\n                >\r\n                    {props.userName}\r\n                </NavLink>\r\n                <div>\r\n                    <small>\r\n                        <em>{fullDate.date} {fullDate.time}</em>\r\n                    </small>\r\n                </div>\r\n            </div>\r\n            <div className={s.hasNewMessages}>\r\n                {props.hasNewMessages ? 'You have a new message!' : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Types\r\n\r\ntype DialogsItemPropsType = DialogType","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {DialogType, getDialogsTC, getNewMessagesTC} from \"../../store/dialogs-reducer\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {DialogsItem} from \"./DialogsItem\";\r\n\r\nclass Dialogs extends React.Component<DialogsPropsType>{\r\n    componentWillMount() {\r\n        this.props.getDialogs();\r\n        this.props.getNewMessages();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {\r\n                    this.props.dialogs.map(d => <DialogsItem key={d.id} {...d}/>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:RootReducerType):MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps:MapDispatchToPropsType = {\r\n    getDialogs:getDialogsTC,\r\n    getNewMessages:getNewMessagesTC\r\n}\r\n\r\nexport default connect<MapStateToPropsType,MapDispatchToPropsType,{},RootReducerType>\r\n(mapStateToProps,mapDispatchToProps)(Dialogs);\r\n\r\n//Types\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs:DialogType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getDialogs:() => void\r\n    getNewMessages:() => void\r\n}\r\n\r\ntype DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\n","import {\r\n    addMessageToSpamTC,\r\n    checkIsViewedMessageTC, getMessagesTC,\r\n    getNewestMessagesTC, messagesPageSize,\r\n    MessageType,\r\n    removeMessageTC, restoreMessageTC\r\n} from \"../../../store/dialogs-reducer\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport s from './Messages.module.css';\r\nimport {correctDate} from \"../../../store/reselect/howNumberOfPagesReselect\";\r\n\r\nclass MessageItem extends React.Component<MessagePropsType> {\r\n    componentWillMount() {\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MessagePropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return this.props.message.senderId !== nextProps.message.senderId\r\n            || this.props.message.viewed !== nextProps.message.viewed\r\n            || this.props.isSpam !== nextProps.isSpam\r\n    }\r\n\r\n    componentWillUpdate(nextProps: Readonly<MessagePropsType>, nextState: Readonly<{}>, nextContext: any) {\r\n        this.props.getMessages(this.props.userID,messagesPageSize,this.props.pageCount)\r\n    }\r\n\r\n    addMessageToSpam() {\r\n        if(this.props.message.senderId !== this.props.authorizedID){\r\n            this.props.addMessageToSpam(this.props.message.id)\r\n        }\r\n    }\r\n\r\n    restoreMessage() {\r\n        this.props.restoreMessage(this.props.message.id)\r\n        this.props.getMessages(this.props.userID,messagesPageSize,this.props.pageCount)\r\n    }\r\n\r\n    render() {\r\n        let text = this.props.message.body.replace(/<br \\/>/g, '\\n');\r\n        const fullDate = correctDate(this.props.message.addedAt);\r\n        const src = this.props.message.senderId === this.props.authorizedID ? this.props.authorizedPhoto : this.props.photo;\r\n        let finalClassName = this.props.message.senderId === this.props.authorizedID\r\n            ? `${s.messageItem} ${s.authorized}` : `${s.messageItem}`;\r\n\r\n        if (this.props.isSpam) {\r\n            finalClassName += ` ${s.spam}`\r\n        }\r\n        return (\r\n            <div className={finalClassName} key={this.props.message.id}>\r\n                <div className={s.btnsBlock}>\r\n                    <button className={s.removeMessageBtn}\r\n                            onClick={this.props.isSpam\r\n                                ? () => {\r\n                                }\r\n                                : this.addMessageToSpam.bind(this)\r\n                            }\r\n                    >+\r\n                    </button>\r\n\r\n                    <button className={s.removeMessageBtn}\r\n                            onClick={this.props.isSpam\r\n                                ? this.restoreMessage.bind(this)\r\n                                : () => this.props.removeMessage(this.props.message.id)\r\n                            }\r\n                    >х\r\n                    </button>\r\n                </div>\r\n\r\n                <div className={s.image}>\r\n                    <img\r\n                        src={src || 'https://vjoy.cc/wp-content/uploads/2020/12/1133ea1de4e69bd760056f2c04e90920.png'}/>\r\n                </div>\r\n                <div className={s.text}>\r\n                    <h4 className={s.name}>{this.props.message.senderName}</h4>\r\n                    <div className={s.body}>{text}</div>\r\n                    <div className={s.date}><small>{fullDate.time} {fullDate.date}</small></div>\r\n                    <div className={s.viewed}>{this.props.message.viewed ? <small>Просмотрено</small> :\r\n                        <small>Не просмотрено</small>}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToProps => ({\r\n    photo: state.profilePage.profile.photos.small,\r\n    authorizedID: state.auth.me.id,\r\n    authorizedPhoto: state.auth.me.photo,\r\n});\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    checkIsViewedMessage: checkIsViewedMessageTC,\r\n    getNewestMessages: getNewestMessagesTC,\r\n    removeMessage: removeMessageTC,\r\n    addMessageToSpam: addMessageToSpamTC,\r\n    restoreMessage: restoreMessageTC,\r\n    getMessages: getMessagesTC\r\n};\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, OwnPropsType, RootReducerType>\r\n(mapStateToProps, mapDispatchToProps)(MessageItem);\r\n\r\n//Types\r\n\r\ntype MessagePropsType = MapStateToProps & MapDispatchToProps & OwnPropsType;\r\ntype MapStateToProps = {\r\n    photo: string | null\r\n    authorizedID: number\r\n    authorizedPhoto: string | null\r\n\r\n};\r\ntype MapDispatchToProps = {\r\n    checkIsViewedMessage: (messageID: string) => void\r\n    getNewestMessages: (userID: number, date: string) => void\r\n    removeMessage: (messageID: string) => void\r\n    addMessageToSpam: (messageID: string) => void\r\n    restoreMessage: (messageID: string) => void\r\n    getMessages: (userID: number, pageSize: number, count: number) => void\r\n};\r\ntype OwnPropsType = {\r\n    message: MessageType\r\n    isSpam?: boolean\r\n    pageCount: number\r\n    userID:number\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const MessageField = (\r\n    {className,...props}:MessageFieldPropsType\r\n) => {\r\n    const [text,setText] = useState('');\r\n    const dispatch = useDispatch();\r\n    const onChangeHandler = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n        setText(e.currentTarget.value);\r\n    }\r\n    const onClickHandler = () => {\r\n        props.sendMessage(props.userID,text);\r\n        setText('');\r\n    }\r\n    return(\r\n        <div className={className}>\r\n            <textarea\r\n                onChange={onChangeHandler}\r\n                value={text}\r\n                placeholder={'To write a message...'}\r\n            />\r\n            <button onClick={onClickHandler}>\r\n                send\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessageFieldPropsType = {\r\n    className?:string\r\n    sendMessage: (userID:number, body:string) => void\r\n    userID:number\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {\r\n    addMessagesTC,\r\n    clearMessagesAC,\r\n    getMessagesTC, messagesPageSize,\r\n    MessageType, SectionSelectedType, setSectionSelectAC,\r\n    startOrRefreshDialogsTC\r\n} from \"../../../store/dialogs-reducer\";\r\nimport MessageItem from \"./MessageItem\";\r\nimport s from './Messages.module.css';\r\nimport {MessageField} from \"./messageField\";\r\nimport {getUserProfileTC} from \"../../../store/profile-reducer\";\r\nimport {howNumberOfPagesReselect} from \"../../../store/reselect/howNumberOfPagesReselect\";\r\n\r\n\r\nclass Messages extends React.Component<MessagesPropsType, MessagesStateType> {\r\n    constructor(props: MessagesPropsType) {\r\n        super(props)\r\n        this.state = {\r\n            pageCount: 1,\r\n            messages: []\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.userID !== 0) {\r\n            this.props.getUserProfile(this.props.userID);\r\n        }\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MessagesPropsType>, nextState: Readonly<MessagesStateType>, nextContext: any): boolean {\r\n        return this.props.userID !== nextProps.userID\r\n            || this.props.messages !== nextProps.messages\r\n            || this.state.pageCount !== nextState.pageCount\r\n            || this.props.sectionSelect !== nextProps.sectionSelect\r\n            || this.props.spam !== nextProps.spam\r\n    }\r\n\r\n    componentWillUpdate(nextProps: Readonly<MessagesPropsType>, nextState: Readonly<MessagesStateType>, nextContext: any) {\r\n        if (nextState.pageCount !== this.state.pageCount) {\r\n            this.props.getMessages(this.props.userID, messagesPageSize, nextState.pageCount)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearMessages();\r\n    }\r\n\r\n    showPrevMessages() {\r\n        this.setState((state: MessagesStateType) => {\r\n            return this.state.pageCount < howNumberOfPagesReselect({\r\n                totalCount: this.props.messagesTotalCount,\r\n                pagesSize: messagesPageSize\r\n            }) ? {\r\n                ...state,\r\n                pageCount: state.pageCount + 1\r\n            } : {...state, pageCount: state.pageCount};\r\n        })\r\n    }\r\n\r\n    showNextMessages() {\r\n        this.setState((state: MessagesStateType) => {\r\n            return this.state.pageCount > 1 ? {\r\n                ...state,\r\n                pageCount: state.pageCount - 1\r\n            } : {...state, pageCount: state.pageCount};\r\n        })\r\n    }\r\n\r\n    onClickShowMessages(select: SectionSelectedType) {\r\n        this.props.setSectionSelect(select);\r\n        this.setState((state: MessagesStateType) => {\r\n            return {\r\n                ...state,\r\n                pageCount: 1\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const maxPageSize = howNumberOfPagesReselect({\r\n            totalCount: this.props.messagesTotalCount,\r\n            pagesSize: messagesPageSize\r\n        });\r\n        let checkAreThereMessages: boolean = this.props.sectionSelect === 'messages' ? this.props.messages.length !== 0 : this.props.spam.length !== 0;\r\n        return (\r\n            <div className={s.messages}>\r\n                <div className={s.nav}>\r\n                    <button\r\n                        className={this.props.sectionSelect === 'messages' ? s.active : ''}\r\n                        onClick={() => {\r\n                            this.onClickShowMessages('messages')\r\n                        }}\r\n                    >\r\n                        Messages\r\n                    </button>\r\n                    <button\r\n                        className={this.props.sectionSelect === 'spam' ? s.active : ''}\r\n                        onClick={() => {\r\n                            this.onClickShowMessages('spam')\r\n                        }}\r\n                    >\r\n                        Spam\r\n                    </button>\r\n                </div>\r\n\r\n                <div className={s.messagesBlock}>\r\n                    {this.state.pageCount < maxPageSize && checkAreThereMessages &&\r\n                    <button className={s.showPrevMessages} onClick={this.showPrevMessages.bind(this)}>\r\n                        Показать предыдущие сообщения &#8593;\r\n                    </button>}\r\n\r\n                    {this.props.sectionSelect === 'messages'\r\n                        ? this.props.messages.map(m => <MessageItem userID={this.props.userID}\r\n                                                                    pageCount={this.state.pageCount} key={m.id}\r\n                                                                    message={m}/>)\r\n                        : ''\r\n                    }\r\n                    {this.props.sectionSelect === 'spam'\r\n                        ? this.props.spam.map(m => <MessageItem userID={this.props.userID}\r\n                                                                pageCount={this.state.pageCount} isSpam key={m.id}\r\n                                                                message={m}/>)\r\n                        : ''\r\n                    }\r\n\r\n                    {this.state.pageCount > 1 && checkAreThereMessages &&\r\n                    <button className={s.showNextMessages} onClick={this.showNextMessages.bind(this)}>\r\n                        Показать следующие сообщения &#8595;\r\n                    </button>}\r\n\r\n                </div>\r\n                <MessageField userID={this.props.userID} sendMessage={this.props.sendMessage} className={s.sendField}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToProps => ({\r\n    messages: state.dialogsPage.messages.items,\r\n    userID: state.dialogsPage.messages.userID,\r\n    messagesTotalCount: state.dialogsPage.messages.totalCountMessages,\r\n    sectionSelect: state.dialogsPage.sectionSelected,\r\n    spam: state.dialogsPage.spam\r\n});\r\nconst mapDispatchToProps: MapDispatchToProps = {\r\n    getMessages: getMessagesTC,\r\n    sendMessage: addMessagesTC,\r\n    getUserProfile: getUserProfileTC,\r\n    refreshDialog: startOrRefreshDialogsTC,\r\n    clearMessages: clearMessagesAC,\r\n    setSectionSelect: setSectionSelectAC,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n\r\n//Types\r\n\r\ntype MessagesPropsType = MapStateToProps & MapDispatchToProps;\r\ntype MapStateToProps = {\r\n    messages: MessageType[]\r\n    spam: MessageType[]\r\n    userID: number\r\n    messagesTotalCount: number\r\n    sectionSelect: SectionSelectedType\r\n};\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userID: number) => void\r\n    getMessages: (userID: number, pageSize: number, count: number) => void\r\n    sendMessage: (userID: number, body: string) => void\r\n    refreshDialog: (userID: number) => void\r\n    clearMessages: () => void\r\n    setSectionSelect: (select: SectionSelectedType) => void\r\n};\r\n\r\ntype MessagesStateType = {\r\n    pageCount: number\r\n    messages: MessageType[]\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Menu} from \"./component/menu/Menu\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport Follow from \"./component/follow/Follow\";\r\nimport {MyPostContainer} from \"./component/myPosts/MyPostContainer\";\r\nimport {UsersContainer} from \"./component/users/UserContainer\";\r\nimport {howShowUsersCount} from \"./store/users-reducer\";\r\nimport {MyProfile} from \"./component/profile/MyProfile\";\r\nimport ProfileContainer from \"./component/profile/ProfileContainer\";\r\nimport HeaderContainer from \"./component/header/HeaderContainer\";\r\nimport {Login} from \"./component/feature/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"./store/store\";\r\nimport {RequestType} from \"./api/auth-api\";\r\nimport {setLoggedInTC} from \"./store/auth-reducer\";\r\nimport Dialogs from \"./component/dialogs/Dialogs\";\r\nimport Messages from \"./component/dialogs/Messages/Messages\";\r\nimport {getNewMessagesTC} from \"./store/dialogs-reducer\";\r\n\r\ninterface AppInterface {\r\n    login: (data: RequestType) => void\r\n    isLoggedIn: boolean\r\n    userID: number\r\n    newMessagesCount: number\r\n    getNewMessages: () => void\r\n}\r\n\r\nclass App extends React.Component<AppInterface> {\r\n    componentWillMount() {\r\n        this.props.getNewMessages();\r\n    }\r\n\r\n\r\n    componentWillUpdate() {\r\n        this.props.getNewMessages();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isLoggedIn) {\r\n            return (\r\n                <div className=\"App\">\r\n                    <HeaderContainer/>\r\n                    <div className='container'>\r\n                        <Login {...this.props}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div className=\"App\">\r\n                <HeaderContainer/>\r\n                <div className='container'>\r\n                    <Menu newMessagesCount={this.props.newMessagesCount}/>\r\n                    <main className='main'>\r\n                        <Routes>\r\n                            <Route path='/' element={<MyProfile id={this.props.userID}/>}/>\r\n                            <Route path='/profile/me' element={<MyProfile id={this.props.userID}/>}/>\r\n                            <Route path='/profile/*' element={<ProfileContainer/>}/>\r\n                            <Route path='/posts' element={<MyPostContainer/>}/>\r\n                            <Route path='/users' element={<UsersContainer showUsersCount={howShowUsersCount}/>}/>\r\n                            <Route path='/follow' element={<Follow/>}/>\r\n                            <Route path='/login' element={<Login {...this.props}/>}/>\r\n                            <Route path='/dialogs' element={<Dialogs/>}/>\r\n                            <Route path='/dialogs/messages/*' element={<Messages/>}/>\r\n                        </Routes>\r\n                    </main>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n    return {\r\n        isLoggedIn: state.auth.isLoggedIn,\r\n        userID: state.auth.me.id,\r\n        newMessagesCount: state.dialogsPage.messages.newMessagesCount\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n    login: setLoggedInTC,\r\n    getNewMessages: getNewMessagesTC\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isLoggedIn: boolean\r\n    userID: number\r\n    newMessagesCount: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (data: RequestType) => void\r\n    getNewMessages: () => void\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReducerType>(mapStateToProps, mapDispatchToProps)(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {PostsReducer, PostsReducerActionsTypes} from \"./posts-reducer\";\r\nimport {UsersReducer, UsersReducerActionsTypes} from \"./users-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {ProfileReducer, ProfileReducerActionsTypes} from \"./profile-reducer\";\r\nimport {AuthReducer, AuthReducerActionsTypes} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk/src/types\";\r\nimport {DialogsReducer, DialogsReducerActionTypes} from \"./dialogs-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts:PostsReducer,\r\n    usersPage:UsersReducer,\r\n    profilePage:ProfileReducer,\r\n    auth:AuthReducer,\r\n    dialogsPage:DialogsReducer\r\n});\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\r\nexport type AppActionsTypes = AuthReducerActionsTypes\r\n    | PostsReducerActionsTypes\r\n    | ProfileReducerActionsTypes\r\n    | UsersReducerActionsTypes\r\n    |DialogsReducerActionTypes;\r\nexport type ThunksTypes = ThunkAction<void, RootReducerType, unknown, AppActionsTypes>;\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter, Routes} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}><App/></Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}